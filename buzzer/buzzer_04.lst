0000              1   ;buzzer_02.asm: should do a countdown timer too
0000              2   
                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              4   
0000              5   org 0000H
0000 020168       6            ljmp myprogram
0003              7            
000B              8   org 000BH
000B 020029       9            ljmp ISR_timer0
000E             10            
001B             11   org 001BH
001B 020139      12            ljmp ISR_timer1
001E             13            
0030             14   DSEG at 30H
0030             15   count10ms: ds 1
0031             16   countdown10ms: ds 1
0032             17   sec:   ds 1
0033             18   min:   ds 1
0034             19   hrs:     ds 1
0035             20   meridiem:  ds 1 ;keeps track of am/pm
0036             21   secAlarm: ds 1
0037             22   minAlarm: ds 1
0038             23   hrsAlarm: ds 1
0039             24   meridiemAlarm: ds 1
003A             25   
0000             26   BSEG
0000             27   still12: dbit 1
0001             28   still12Alarm: dbit 1
0002             29   
001E             30   CSEG
001E             31   
001E             32   ; Look-up table for 7-segment displays
001E             33   myLUT:
001E C0F9A4B0    34       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
0023 9282F880    35       DB 092H, 082H, 0F8H, 080H, 090H
     90
0028 FF          36       DB 0FFH ; All segments off
0029             37   
0029             38   XTAL           EQU 33333333
0029             39   FREQ_0         EQU 100
0029             40   TIMER0_RELOAD  EQU 65536-(XTAL/(12*FREQ_0)) ;clock
0029             41   FREQ_1              EQU 2000 ;lets face it 2000hz is irritating as hell, 1000hz is way less awful
0029             42   TIMER1_RELOAD  EQU 65536-(XTAL/(12*2*FREQ_1)) ;buzz
0029             43   
0029             44   ;-----------------------------
0029             45   ;-----------------------------
0029             46   ;-----------------------------
0029             47   ;-----------------------------
0029             48   
0029             49   ISR_Timer0:
0029             50            ; Reload the timer
0029 758C93      51       mov TH0, #high(TIMER0_RELOAD)
002C 758A7F      52       mov TL0, #low(TIMER0_RELOAD)
002F             53       
002F             54       ; Save used register into the stack
002F C0D0        55       push psw
0031 C0F0        56       push b
0033 C0E0        57       push acc
0035 C083        58       push dph
0037 C082        59       push dpl
0039             60       
0039             61   ISR_0:
0039 20E837      62       jb SWA.0, ISR_Timer0_L0 ; Setting up time.  Do not increment anything
003C             63       
003C             64       ; Increment the counter and check if a second has passed
003C             65       
003C 0530        66            inc count10ms
003E E530        67       mov a, count10ms
0040 B46430      68       cjne A, #100, ISR_Timer0_L0
0043 753000      69       mov count10ms, #0
0046             70       
0046 E532        71       mov a, sec
0048 2401        72       add a, #1
004A D4          73       da a
004B F532        74       mov sec, a
004D B46023      75       cjne A, #60H, ISR_Timer0_L0
0050 753200      76       mov sec, #0
0053             77    
0053 E533        78       mov a, min
0055 2401        79       add a, #1
0057 D4          80       da a
0058 F533        81       mov min, a
005A B46016      82       cjne A, #60H, ISR_Timer0_L0
005D 753300      83       mov min, #0
0060             84   
0060 E534        85       mov a, hrs
0062 2401        86       add a, #1
0064 D4          87       da a
0065 F534        88       mov hrs, a
0067             89       
0067 12031F      90       lcall checkMeridiem
006A             91       
006A B41306      92       cjne A, #13H, ISR_Timer0_L0
006D 753401      93       mov hrs, #1
0070             94       
0070 20E938      95       jb SWA.1, ISR_Timer_Countdown ;setting up alarm, do not display time
0073             96      
0073             97   ISR_Timer0_L0:
0073             98   
0073             99            ; Update the display.  This happens every 10 ms
0073 90001E     100            mov dptr, #myLUT
0076            101     
0076 853591     102            mov HEX0, meridiem
0079            103            
0079 E532       104            mov a, sec
007B 540F       105            anl a, #0fH
007D 93         106            movc a, @a+dptr
007E F593       107            mov HEX2, a
0080 E532       108            mov a, sec
0082 C4         109            swap a
0083 540F       110            anl a, #0fH
0085 93         111            movc a, @a+dptr
0086 F594       112            mov HEX3, a
0088            113   
0088 E533       114            mov a, min
008A 540F       115            anl a, #0fH
008C 93         116            movc a, @a+dptr
008D F58E       117            mov HEX4, a
008F E533       118            mov a, min
0091 C4         119            swap a
0092 540F       120            anl a, #0fH
0094 93         121            movc a, @a+dptr
0095 F58F       122            mov HEX5, a
0097            123   
0097 E534       124            mov a, hrs
0099 540F       125            anl a, #0fH
009B 93         126            movc a, @a+dptr
009C F596       127            mov HEX6, a
009E E534       128            mov a, hrs
00A0 20E402     129            jb acc.4, ISR_Timer0_L1
00A3 74A0       130            mov a, #0A0H
00A5            131            
00A5            132   ISR_Timer0_L1:
00A5 C4         133            swap a
00A6 540F       134            anl a, #0fH
00A8 93         135            movc a, @a+dptr
00A9 F597       136            mov HEX7, a
00AB            137            
00AB            138   ISR_Timer_Countdown:
00AB E59E       139            mov a, SWC
00AD 5401       140            anl a, #00000001B ;sw 16 is the "start" button
00AF 607D       141            jz  ISR_End ;if we haven't pressed start yet, don't countdown
00B1            142   
00B1 1531       143            dec countdown10ms
00B3 E531       144       mov a, countdown10ms
00B5 B46476     145       cjne A, #100, ISR_End
00B8 753100     146       mov countdown10ms, #0
00BB            147       
00BB            148   ;--------- time conditions
00BB E536       149       mov a, secAlarm
00BD 540F       150       anl a, #00FH
00BF B4002B     151       cjne A, #0, regularSec ;can we subtract from lsb seconds?
00C2 E536       152       mov a, secAlarm ;nope, need to borrow
00C4 54F0       153       anl a, #0F0H
00C6 C4         154       swap a
00C7 B4002B     155       cjne a, #0, borrowmsbSec ;can we borrow from msb seconds?
00CA E537       156       mov a, minAlarm ;nope, need to borrow.
00CC 540F       157       anl a, #00FH
00CE B4002D     158       cjne A, #0, borrowlsbMin ;can we subtract from lsb minutes?
00D1 E537       159       mov a, minAlarm ;nope, need to borrow
00D3 54F0       160       anl a, #0F0H
00D5 C4         161       swap a
00D6 B40030     162       cjne a, #0, borrowmsbMin ;can we borrow from msb minutes?
00D9 E538       163       mov a, hrsAlarm ;seconds decrementing
00DB 540F       164       anl a, #00FH
00DD B40035     165       cjne A, #0, borrowlsbHrs ;can we subtract from lsb hours?
00E0 E538       166       mov a, hrsAlarm ;nope, need to borrow
00E2 54F0       167       anl a, #0F0H
00E4 C4         168       swap a
00E5 B4003B     169       cjne a, #0, borrowmsbHrs ;can we borrow from msb hours?
00E8            170       
00E8            171       ; 00 00 00 CASE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00E8 75E8FF     172       mov LEDRA, #0FFH ;celebrate with lights! COUNTER DONE
00EB 8041       173       sjmp ISR_End
00ED            174       
00ED            175       
00ED            176   regularSec: ; -- -- -- ## case
00ED E536       177            mov a, secAlarm
00EF 9401       178            subb a, #1
00F1 F536       179            mov secAlarm, a
00F3 8039       180            sjmp ISR_END
00F5            181   
00F5            182   borrowmsbSec: ;-- -- #0 case
00F5 9401       183       subb a, #1
00F7 4490       184       orl a, #10010000B
00F9 C4         185       swap a
00FA F536       186       mov secAlarm, a
00FC 8030       187       sjmp ISR_END
00FE            188   
00FE            189   borrowlsbMin: ;-- ## 00 case
00FE E537       190            mov a, minAlarm
0100 9401       191            subb a, #1
0102 F537       192            mov minAlarm, a
0104 753659     193            mov secAlarm, #59H
0107 8025       194            sjmp ISR_END
0109            195      
0109            196   borrowmsbMin: ;-- #0 00 case
0109 9401       197            subb a, #1
010B 4490       198       orl a, #10010000B
010D C4         199       swap a
010E F537       200       mov minAlarm, a
0110 753659     201       mov secAlarm, #59H
0113 8019       202       sjmp ISR_END
0115            203       
0115            204   borrowlsbHrs: ;## 00 00 case
0115 E538       205            mov a, hrsAlarm
0117 9401       206            subb a, #1
0119 F538       207            mov hrsAlarm, a
011B 753659     208            mov secAlarm, #59H
011E 753759     209            mov minAlarm, #59H
0121 800B       210            sjmp ISR_END
0123            211       
0123            212   borrowmsbHrs: ;#0 00 00 case
0123 753809     213       mov hrsAlarm, #09H
0126 753659     214       mov secAlarm, #59H
0129 753759     215            mov minAlarm, #59H
012C 8000       216            sjmp ISR_END
012E            217            
012E            218   ;-----------------------
012E            219   
012E            220   ISR_End:
012E            221            ; Restore used registers
012E D082       222            pop dpl
0130 D083       223            pop dph
0132 D0E0       224            pop acc
0134 D0F0       225            pop b
0136 D0D0       226            pop psw    
0138 32         227            reti
0139            228   
0139            229   ;--------------------------------------   
0139            230   ;--------------------------------------   
0139            231   ;--------------------------------------      
0139            232   ;--------------------------------------      
0139            233      
0139            234   ISR_Timer1:
0139 C28F       235            clr TF1 ;may not be necessary
013B B2A0       236            cpl P2.0
013D B2A1       237            cpl P2.1
013F 758DFD     238       mov TH1, #high(TIMER1_RELOAD)
0142 758B4A     239       mov TL1, #low(TIMER1_RELOAD)
0145 32         240            reti
0146            241            
0146            242   ;--------------------------------------   
0146            243   ;--------------------------------------   
0146            244   ;--------------------------------------      
0146            245   ;--------------------------------------  
0146            246   
0146            247   Init_Timer0:     
0146 758911     248            mov TMOD,  #00010001B ; GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0149 C28C       249            clr TR0 ; Disable timer 0
014B C28D       250            clr TF0
014D 758C93     251       mov TH0, #high(TIMER0_RELOAD)
0150 758A7F     252       mov TL0, #low(TIMER0_RELOAD)
0153 D28C       253       setb TR0 ; Enable timer 0
0155 D2A9       254       setb ET0 ; Enable timer 0 interrupt
0157 22         255       ret
0158            256       
0158            257   Init_Timer1:     
0158 758911     258            mov TMOD,  #00010001B ; GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
015B C28E       259            clr TR1 ; Disable timer 1
015D C28F       260            clr TF1
015F 758DFD     261       mov TH1, #high(TIMER1_RELOAD)
0162 758B4A     262       mov TL1, #low(TIMER1_RELOAD)
0165 D28E       263       setb TR1 ; Enable timer 1, dont set interrupt yet
0167 22         264       ret
0168            265   
0168            266   
0168            267   ;-------------------------------------------------------------------------------------------
0168            268   ;-------------------------------------------------------------------------------------------
0168            269   ;-------------------------------------------------------------------------------------------
0168            270   ;-------------------------------------------------------------------------------------------
0168            271   ;-------------------------------------------------------------------------------------------
0168            272   
0168            273   myprogram:
0168 75817F     274            mov SP, #7FH
016B 75E800     275            mov LEDRA,#0
016E 759500     276            mov LEDRB,#0
0171 759E00     277            mov LEDRC,#0
0174 75F800     278            mov LEDG,#0
0177 759C03     279            mov P2MOD, #00000011B ; P2.0, P2.1 are outputs.
017A D2A0       280            setb P2.0
017C D2A1       281            setb p2.1
017E            282   
017E 753250     283            mov sec, #50H
0181 753359     284            mov min, #59H
0184 753411     285            mov hrs, #11H
0187 753508     286            mov meridiem, #08H
018A C200       287            clr still12
018C            288            
018C 753615     289            mov secAlarm, #15H
018F 753700     290            mov minAlarm, #00H
0192 753801     291            mov hrsAlarm, #01H
0195 75390C     292            mov meridiemAlarm, #0CH
0198 C201       293            clr still12Alarm
019A            294   
019A 120146     295            lcall Init_Timer0 ;set up
019D 120158     296            lcall Init_Timer1
01A0            297            
01A0 D2AF       298       setb EA  ; Enable all interrupts
01A2            299   
01A2            300   M0: ;clock set loop
01A2            301            
01A2 30EB05     302            jnb SWA.3, M0_Test
01A5 12023A     303            lcall Alarm
01A8 C2E9       304            clr LEDRA.1
01AA            305   M0_Test:
01AA 20E942     306            jb SWA.1, A0 ;alarm set mode
01AD 30E8F2     307            jnb SWA.0, M0 ;clock set mode
01B0            308            
01B0 20FB13     309            jb KEY.3, M1
01B3 30FBFD     310       jnb KEY.3, $
01B6 E534       311       mov a, hrs
01B8 2401       312            add a, #1
01BA D4         313            da a
01BB F534       314            mov hrs, a
01BD 12031F     315            lcall checkMeridiem
01C0 B41303     316       cjne A, #13H, M1
01C3 753401     317       mov hrs, #1
01C6            318   M1:      
01C6 20FA10     319            jb KEY.2, M2
01C9 30FAFD     320       jnb KEY.2, $
01CC E533       321       mov a, min
01CE 2401       322            add a, #1
01D0 D4         323            da a
01D1 F533       324            mov min, a      
01D3 B46003     325       cjne A, #60H, M2
01D6 753300     326       mov min, #0
01D9            327   M2:      
01D9 20F910     328            jb KEY.1, M3
01DC 30F9FD     329            jnb KEY.1, $
01DF E532       330            mov a, sec
01E1 2401       331            add a, #1
01E3 D4         332            da a
01E4 F532       333            mov sec, a
01E6 B46003     334       cjne A, #60H, M3
01E9 753200     335       mov sec, #0
01EC            336   M3:      
01EC 0201A2     337            ljmp M0
01EF            338            
01EF            339   A0: ;alarm set loop
01EF 30E9B0     340            jnb SWA.1, M0 
01F2 1202E6     341            lcall DisplayAlarm
01F5            342            
01F5 20FB13     343            jb KEY.3, A1
01F8            344   hrdisp:  
01F8 1202E6     345            lcall DisplayAlarm
01FB 30FBFA     346       jnb KEY.3, hrdisp
01FE E538       347       mov a, hrsAlarm
0200 2401       348            add a, #1
0202 D4         349            da a
0203 F538       350            mov hrsAlarm, a
0205 B41303     351       cjne A, #13H, A1
0208 753801     352       mov hrsAlarm, #1
020B            353   A1:      
020B 20FA13     354            jb KEY.2, A2
020E            355   mindisp:
020E 1202E6     356            lcall DisplayAlarm
0211 30FAFA     357       jnb KEY.2, mindisp
0214 E537       358       mov a, minAlarm
0216 2401       359            add a, #1
0218 D4         360            da a
0219 F537       361            mov minAlarm, a         
021B B46003     362       cjne A, #60H, A2
021E 753700     363       mov minAlarm, #0
0221            364   A2:      
0221 20F913     365            jb KEY.1, A3
0224            366   secdisp:
0224 1202E6     367            lcall DisplayAlarm
0227 30F9FA     368            jnb KEY.1, secdisp
022A E536       369            mov a, secAlarm
022C 2401       370            add a, #1
022E D4         371            da a
022F F536       372            mov secAlarm, a
0231 B46003     373       cjne A, #60H, A3
0234 753600     374       mov secAlarm, #0
0237            375   A3:      
0237 0201EF     376            ljmp A0
023A            377   
023A            378   ;-------------------------------------------------------------------------------------------
023A            379   ;-------------------------------------------------------------------------------------------
023A            380   ;-------------------------------------------------------------------------------------------
023A            381   ;-------------------------------------------------------------------------------------------
023A            382   ; here's all the subroutines called in the main program
023A            383   
023A            384   Alarm:
023A D2E9       385            setb LEDRA.1
023C 20EF0D     386            jb SWA.7, startStateBeeps
023F 20EE14     387            jb SWA.6, nextStateBeeps
0242 20ED19     388            jb SWA.5, openDoorBeeps
0245 20EC1E     389            jb SWA.4, coolEnoughBeeps
0248 20EBEF     390            jb SWA.3, Alarm
024B 22         391            ret
024C            392            
024C            393   startStateBeeps:
024C 20EFFD     394            jb SWA.7, startStateBeeps
024F D2EA       395            setb LEDRA.2
0251 1202B1     396            lcall shortBeep
0254 80E4       397            sjmp Alarm
0256            398            
0256            399   nextStateBeeps:
0256 20EEFD     400            jb SWA.6, nextStateBeeps
0259 1202B1     401            lcall shortBeep
025C 80DC       402            sjmp Alarm
025E            403            
025E            404   openDoorBeeps:
025E 20EDFD     405            jb SWA.5, openDoorBeeps
0261 12027D     406            lcall longBeep
0264 80D4       407            sjmp Alarm
0266            408            
0266            409   coolEnoughBeeps:
0266 20ECFD     410            jb SWA.4, coolEnoughBeeps
0269 1202B1     411            lcall shortBeep         
026C 1202B1     412            lcall shortBeep
026F 1202B1     413            lcall shortBeep
0272 1202B1     414            lcall shortBeep
0275 1202B1     415            lcall shortBeep
0278 1202B1     416            lcall shortBeep
027B 80BD       417            sjmp Alarm
027D            418   
027D            419            
027D            420   longBeep:
027D 75E8FF     421            mov LEDRA, #11111111B
0280 7595FF     422            mov LEDRB, #11111111B 
0283 759E03     423            mov LEDRC, #00000011B
0286 1202D3     424       lcall buzzOn
0289 1202D9     425            lcall WaitALittle
028C 1202D9     426            lcall WaitALittle
028F 1202D9     427            lcall WaitALittle
0292 1202D9     428            lcall WaitALittle
0295 1202D9     429            lcall WaitALittle
0298 1202D9     430            lcall WaitALittle
029B 1202D9     431            lcall WaitALittle
029E 1202D9     432            lcall WaitALittle
02A1 75E800     433            mov LEDRA, #00000000B
02A4 759500     434            mov LEDRB, #00000000B 
02A7 759E00     435            mov LEDRC, #00000000B
02AA 1202D6     436       lcall buzzOff
02AD 1202D9     437       lcall WaitALittle
02B0 22         438       ret
02B1            439            
02B1            440   shortBeep:
02B1 75E8FF     441            mov LEDRA, #11111111B
02B4 7595FF     442            mov LEDRB, #11111111B
02B7 759E03     443            mov LEDRC, #00000011B
02BA 1202D3     444       lcall buzzOn
02BD 1202D9     445            lcall WaitALittle
02C0 1202D9     446            lcall WaitALittle
02C3 75E800     447            mov LEDRA, #00000000B
02C6 759500     448            mov LEDRB, #00000000B 
02C9 759E00     449            mov LEDRC, #00000000B
02CC 1202D6     450       lcall buzzOff
02CF 1202D9     451       lcall WaitALittle
02D2 22         452       ret
02D3            453       
02D3            454   buzzOn:
02D3 D2AB       455            setb ET1
02D5 22         456            ret
02D6            457            
02D6            458   buzzOff:
02D6 C2AB       459            clr ET1
02D8 22         460            ret
02D9            461            
02D9            462   ;For a 33.33MHz clock, one cycle takes 30ns
02D9            463   WaitALittle:
02D9 7A14       464            mov R2, #20
02DB 79FA       465   L3: mov R1, #250
02DD 78FA       466   L2: mov R0, #250
02DF D8FE       467   L1: djnz R0, L1
02E1 D9FA       468            djnz R1, L2
02E3 DAF6       469            djnz R2, L3
02E5 22         470            ret
02E6            471            
02E6            472   ;---------------------------for when we display the alarm        
02E6            473   DisplayAlarm:
02E6            474            ; Update the display
02E6 90001E     475            mov dptr, #myLUT
02E9            476            
02E9 7591FF     477            mov HEX0, #0FFH ;clear am/pm display    
02EC            478   
02EC E536       479            mov a, secAlarm
02EE 540F       480            anl a, #0fH
02F0 93         481            movc a, @a+dptr
02F1 F593       482            mov HEX2, a
02F3 E536       483            mov a, secAlarm
02F5 C4         484            swap a
02F6 540F       485            anl a, #0fH
02F8 93         486            movc a, @a+dptr
02F9 F594       487            mov HEX3, a
02FB            488   
02FB E537       489            mov a, minAlarm
02FD 540F       490            anl a, #0fH
02FF 93         491            movc a, @a+dptr
0300 F58E       492            mov HEX4, a
0302 E537       493            mov a, minAlarm
0304 C4         494            swap a
0305 540F       495            anl a, #0fH
0307 93         496            movc a, @a+dptr
0308 F58F       497            mov HEX5, a
030A            498   
030A E538       499            mov a, hrsAlarm
030C 540F       500            anl a, #0fH
030E 93         501            movc a, @a+dptr
030F F596       502            mov HEX6, a
0311 E538       503            mov a, hrsAlarm
0313 20E402     504            jb acc.4, exitDispAlarm
0316 74A0       505            mov a, #0A0H    
0318            506   exitDispAlarm:
0318 C4         507            swap a
0319 540F       508            anl a, #0fH
031B 93         509            movc a, @a+dptr
031C F597       510            mov HEX7, a
031E 22         511            ret
031F            512            
031F            513   ;-------this checks and changes am/pm
031F            514   checkMeridiem:
031F E534       515            mov a, hrs
0321 B4120C     516       cjne A, #12H, not12 ;if it isn't 12, leave
0324            517       
0324 20000B     518       jb still12, out ;if it is 12 but was previously 12, do nothing
0327            519         
0327            520   changeMeridiem: ;if it is 12 but was not previously 12 - now change meridiem
0327 E535       521            mov a, meridiem
0329 B2E2       522            cpl acc.2 ; changes 08H to 0CH and vice versa
032B F535       523            mov meridiem, a         
032D            524            ;display am/pm
032D 853591     525            mov HEX0, meridiem
0330            526   not12:
0330 C200       527            clr still12
0332            528   out:
0332 22         529            ret
0333            530            
0333            531   END
