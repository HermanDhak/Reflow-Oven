0000              1   ;buzzer_02.asm: should do a countdown timer too
0000              2   
                 -1   $MODDE2
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER - HIGH BYTE
0000             24   PCON   DATA  087H  ;POWER CONTROL
0000             25   TCON   DATA  088H  ;TIMER CONTROL
0000             26   TMOD   DATA  089H  ;TIMER MODE
0000             27   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             28   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             29   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             30   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             31   P1     DATA  090H  ;PORT 1
0000             32   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             33   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             34   P2     DATA  0A0H  ;PORT 2
0000             35   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             36   P3     DATA  0B0H  ;PORT 3
0000             37   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             38   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             39   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             40   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             41   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             42   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             43   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             44   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             45   ACC    DATA  0E0H  ;ACCUMULATOR
0000             46   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             47   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             48   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             49   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             50   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             51   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             52   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             53   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             54   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             55   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             56   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             57   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             58   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             59   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             60   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             61   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             62   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             63   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             64   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             65   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             66   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             67   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             68   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             69   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             70   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             71   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             72   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             73   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             74   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             75   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             76   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             77   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             78   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             79   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             80   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             81   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             82   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             83   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             84   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             85   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             86   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             87   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             88   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             89   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             90   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             91   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             92   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             93   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             94   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             95   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             96   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000             97   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000             98   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000             99   
0000            100   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            101   ; we have the following extra registers:
0000            102   
0000            103   HEX0   DATA  091H ; Zero turns the segment on
0000            104   HEX1   DATA  092H ; 
0000            105   HEX2   DATA  093H ; 
0000            106   HEX3   DATA  094H ; 
0000            107   HEX4   DATA  08EH ;
0000            108   HEX5   DATA  08FH ;
0000            109   HEX6   DATA  096H ;
0000            110   HEX7   DATA  097H ;
0000            111   
0000            112   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            113   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            114   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            115   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            116   
0000            117   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            118   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            119   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            120   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            121   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            122   SWB    DATA  095H ; Switches SW8 to SW15
0000            123   SWC    DATA  09EH ; Switches SW16 and SW17
0000            124   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            125   
0000            126   LCD_CMD   DATA 0D8H ;
0000            127   LCD_DATA  DATA 0D9H ;
0000            128   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            129   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            130   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            131   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            132   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            133   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            134   
0000            135   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            136   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            137   ; bit 1: FL_WE_N
0000            138   ; bit 2: FL_OE_N
0000            139   ; bit 3: FL_CE_N
0000            140   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            141   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            142   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            143   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            144   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            145   
0000              4   
0000              5   org 0000H
0000 02012D       6            ljmp myprogram
0003              7            
000B              8   org 000BH
000B 020029       9            ljmp ISR_timer0
000E             10            
001B             11   org 001BH
001B 0200FE      12            ljmp ISR_timer1
001E             13            
0030             14   DSEG at 30H
0030             15   count10ms: ds 1
0031             16   countdown10ms: ds 1
0032             17   sec:   ds 1
0033             18   min:   ds 1
0034             19   hrs:     ds 1
0035             20   meridiem:  ds 1 ;keeps track of am/pm
0036             21   secAlarm: ds 1
0037             22   minAlarm: ds 1
0038             23   hrsAlarm: ds 1
0039             24   meridiemAlarm: ds 1
003A             25   
0000             26   BSEG
0000             27   still12: dbit 1
0001             28   still12Alarm: dbit 1
0002             29   
001E             30   CSEG
001E             31   
001E             32   ; Look-up table for 7-segment displays
001E             33   myLUT:
001E C0F9A4B0    34       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
0023 9282F880    35       DB 092H, 082H, 0F8H, 080H, 090H
     90
0028 FF          36       DB 0FFH ; All segments off
0029             37   
0029             38   XTAL           EQU 33333333
0029             39   FREQ_0         EQU 100
0029             40   TIMER0_RELOAD  EQU 65536-(XTAL/(12*FREQ_0)) ;clock
0029             41   FREQ_1              EQU 2000 ;lets face it 2000hz is irritating as hell, 1000hz is way less awful
0029             42   TIMER1_RELOAD  EQU 65536-(XTAL/(12*2*FREQ_1)) ;buzz
0029             43   
0029             44   ;-----------------------------
0029             45   ;-----------------------------
0029             46   ;-----------------------------
0029             47   ;-----------------------------
0029             48   
0029             49   ISR_Timer0:
0029             50            ; Reload the timer
0029 758C93      51       mov TH0, #high(TIMER0_RELOAD)
002C 758A7F      52       mov TL0, #low(TIMER0_RELOAD)
002F             53       
002F             54       ; Save used register into the stack
002F C0D0        55       push psw
0031 C0F0        56       push b
0033 C0E0        57       push acc
0035 C083        58       push dph
0037 C082        59       push dpl
0039             60       
0039             61   ISR_0:
0039 20E837      62       jb SWA.0, ISR_Timer0_L0 ; Setting up time.  Do not increment anything
003C             63       
003C             64       ; Increment the counter and check if a second has passed
003C             65       
003C 0530        66            inc count10ms
003E E530        67       mov a, count10ms
0040 B46430      68       cjne A, #100, ISR_Timer0_L0
0043 753000      69       mov count10ms, #0
0046             70       
0046 E532        71       mov a, sec
0048 2401        72       add a, #1
004A D4          73       da a
004B F532        74       mov sec, a
004D B46023      75       cjne A, #60H, ISR_Timer0_L0
0050 753200      76       mov sec, #0
0053             77    
0053 E533        78       mov a, min
0055 2401        79       add a, #1
0057 D4          80       da a
0058 F533        81       mov min, a
005A B46016      82       cjne A, #60H, ISR_Timer0_L0
005D 753300      83       mov min, #0
0060             84   
0060 E534        85       mov a, hrs
0062 2401        86       add a, #1
0064 D4          87       da a
0065 F534        88       mov hrs, a
0067             89       
0067 1202E4      90       lcall checkMeridiem
006A             91       
006A B41306      92       cjne A, #13H, ISR_Timer0_L0
006D 753401      93       mov hrs, #1
0070             94       
0070 20E938      95       jb SWA.1, ISR_Timer_Countdown ;setting up alarm, do not display time
0073             96      
0073             97   ISR_Timer0_L0:
0073             98   
0073             99            ; Update the display.  This happens every 10 ms
0073 90001E     100            mov dptr, #myLUT
0076            101     
0076 853591     102            mov HEX0, meridiem
0079            103            
0079 E532       104            mov a, sec
007B 540F       105            anl a, #0fH
007D 93         106            movc a, @a+dptr
007E F593       107            mov HEX2, a
0080 E532       108            mov a, sec
0082 C4         109            swap a
0083 540F       110            anl a, #0fH
0085 93         111            movc a, @a+dptr
0086 F594       112            mov HEX3, a
0088            113   
0088 E533       114            mov a, min
008A 540F       115            anl a, #0fH
008C 93         116            movc a, @a+dptr
008D F58E       117            mov HEX4, a
008F E533       118            mov a, min
0091 C4         119            swap a
0092 540F       120            anl a, #0fH
0094 93         121            movc a, @a+dptr
0095 F58F       122            mov HEX5, a
0097            123   
0097 E534       124            mov a, hrs
0099 540F       125            anl a, #0fH
009B 93         126            movc a, @a+dptr
009C F596       127            mov HEX6, a
009E E534       128            mov a, hrs
00A0 20E402     129            jb acc.4, ISR_Timer0_L1
00A3 74A0       130            mov a, #0A0H
00A5            131            
00A5            132   ISR_Timer0_L1:
00A5 C4         133            swap a
00A6 540F       134            anl a, #0fH
00A8 93         135            movc a, @a+dptr
00A9 F597       136            mov HEX7, a
00AB            137            
00AB            138   ISR_Timer_Countdown:
00AB E59E       139            mov a, SWC
00AD 5401       140            anl a, #00000001B
00AF 6042       141            jz  ISR_End ;if we haven't pressed start yet, don't countdown
00B1            142   
00B1 1531       143            dec countdown10ms
00B3 E531       144       mov a, countdown10ms
00B5 B4643B     145       cjne A, #100, ISR_End
00B8 753100     146       mov countdown10ms, #0
00BB            147       
00BB E536       148       mov a, secAlarm
00BD 540F       149       anl a, #0FH
00BF B4000A     150       cjne A, #0, regularSec
00C2 E536       151       mov a, secAlarm
00C4 C4         152       swap a
00C5 9401       153       subb a, #1
00C7 4490       154       orl a, #10010000B
00C9 C4         155       swap a
00CA 8004       156       sjmp shiftBackSec
00CC            157   regularSec:
00CC E536       158            mov a, secAlarm
00CE 9401       159            subb a, #1  
00D0            160   shiftBackSec:
00D0 F536       161       mov secAlarm, a
00D2 B4001E     162       cjne A, #00H, ISR_End
00D5 75373B     163       mov minAlarm, #59
00D8            164      ; cjne A, #00H, ISR_End
00D8            165      ; mov minAlarm, A
00D8            166      ; cjne A, #00H, ISR_End
00D8            167      ; mov hrsAlarm, A
00D8            168      ; cjne A, #00H, ISR_End
00D8            169      ; mov secAlarm, #59
00D8            170   
00D8 E537       171       mov a, minAlarm
00DA 9401       172       subb a, #1
00DC            173      ; da a
00DC F537       174       mov minAlarm, a
00DE B40012     175       cjne A, #00H, ISR_End
00E1 75373B     176       mov minAlarm, #59
00E4            177   
00E4 E538       178       mov a, hrsAlarm
00E6 9401       179       subb a, #1
00E8            180      ; da a
00E8 F538       181       mov hrsAlarm, a
00EA            182       
00EA B40006     183       cjne A, #0H, ISR_End
00ED 75380C     184       mov hrsAlarm, #12
00F0            185       
00F0 1202AB     186       lcall DisplayAlarm
00F3            187            
00F3            188   
00F3            189   ISR_End:
00F3            190            ; Restore used registers
00F3 D082       191            pop dpl
00F5 D083       192            pop dph
00F7 D0E0       193            pop acc
00F9 D0F0       194            pop b
00FB D0D0       195            pop psw    
00FD 32         196            reti
00FE            197   
00FE            198   ;--------------------------------------   
00FE            199   ;--------------------------------------   
00FE            200   ;--------------------------------------      
00FE            201   ;--------------------------------------      
00FE            202      
00FE            203   ISR_Timer1:
00FE C28F       204            clr TF1 ;may not be necessary
0100 B2A0       205            cpl P2.0
0102 B2A1       206            cpl P2.1
0104 758DFD     207       mov TH1, #high(TIMER1_RELOAD)
0107 758B4A     208       mov TL1, #low(TIMER1_RELOAD)
010A 32         209            reti
010B            210            
010B            211   ;--------------------------------------   
010B            212   ;--------------------------------------   
010B            213   ;--------------------------------------      
010B            214   ;--------------------------------------  
010B            215   
010B            216   Init_Timer0:     
010B 758911     217            mov TMOD,  #00010001B ; GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
010E C28C       218            clr TR0 ; Disable timer 0
0110 C28D       219            clr TF0
0112 758C93     220       mov TH0, #high(TIMER0_RELOAD)
0115 758A7F     221       mov TL0, #low(TIMER0_RELOAD)
0118 D28C       222       setb TR0 ; Enable timer 0
011A D2A9       223       setb ET0 ; Enable timer 0 interrupt
011C 22         224       ret
011D            225       
011D            226   Init_Timer1:     
011D 758911     227            mov TMOD,  #00010001B ; GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0120 C28E       228            clr TR1 ; Disable timer 1
0122 C28F       229            clr TF1
0124 758DFD     230       mov TH1, #high(TIMER1_RELOAD)
0127 758B4A     231       mov TL1, #low(TIMER1_RELOAD)
012A D28E       232       setb TR1 ; Enable timer 1, dont set interrupt yet
012C 22         233       ret
012D            234   
012D            235   
012D            236   ;-------------------------------------------------------------------------------------------
012D            237   ;-------------------------------------------------------------------------------------------
012D            238   ;-------------------------------------------------------------------------------------------
012D            239   ;-------------------------------------------------------------------------------------------
012D            240   ;-------------------------------------------------------------------------------------------
012D            241   
012D            242   myprogram:
012D 75817F     243            mov SP, #7FH
0130 75E800     244            mov LEDRA,#0
0133 759500     245            mov LEDRB,#0
0136 759E00     246            mov LEDRC,#0
0139 75F800     247            mov LEDG,#0
013C 759C03     248            mov P2MOD, #00000011B ; P2.0, P2.1 are outputs.
013F D2A0       249            setb P2.0
0141 D2A1       250            setb p2.1
0143            251   
0143 753250     252            mov sec, #50H
0146 753359     253            mov min, #59H
0149 753411     254            mov hrs, #11H
014C 753508     255            mov meridiem, #08H
014F C200       256            clr still12
0151            257            
0151 753615     258            mov secAlarm, #15H
0154 753715     259            mov minAlarm, #15H
0157 753801     260            mov hrsAlarm, #01H
015A 75390C     261            mov meridiemAlarm, #0CH
015D C201       262            clr still12Alarm
015F            263   
015F 12010B     264            lcall Init_Timer0 ;set up
0162 12011D     265            lcall Init_Timer1
0165            266            
0165 D2AF       267       setb EA  ; Enable all interrupts
0167            268   
0167            269   M0: ;clock set loop
0167            270            
0167 30EB05     271            jnb SWA.3, M0_Test
016A 1201FF     272            lcall Alarm
016D C2E9       273            clr LEDRA.1
016F            274   M0_Test:
016F 20E942     275            jb SWA.1, A0 ;alarm set mode
0172 30E8F2     276            jnb SWA.0, M0 ;clock set mode
0175            277            
0175 20FB13     278            jb KEY.3, M1
0178 30FBFD     279       jnb KEY.3, $
017B E534       280       mov a, hrs
017D 2401       281            add a, #1
017F D4         282            da a
0180 F534       283            mov hrs, a
0182 1202E4     284            lcall checkMeridiem
0185 B41303     285       cjne A, #13H, M1
0188 753401     286       mov hrs, #1
018B            287   M1:      
018B 20FA10     288            jb KEY.2, M2
018E 30FAFD     289       jnb KEY.2, $
0191 E533       290       mov a, min
0193 2401       291            add a, #1
0195 D4         292            da a
0196 F533       293            mov min, a      
0198 B46003     294       cjne A, #60H, M2
019B 753300     295       mov min, #0
019E            296   M2:      
019E 20F910     297            jb KEY.1, M3
01A1 30F9FD     298            jnb KEY.1, $
01A4 E532       299            mov a, sec
01A6 2401       300            add a, #1
01A8 D4         301            da a
01A9 F532       302            mov sec, a
01AB B46003     303       cjne A, #60H, M3
01AE 753200     304       mov sec, #0
01B1            305   M3:      
01B1 020167     306            ljmp M0
01B4            307            
01B4            308   A0: ;alarm set loop
01B4 30E9B0     309            jnb SWA.1, M0 
01B7 1202AB     310            lcall DisplayAlarm
01BA            311            
01BA 20FB13     312            jb KEY.3, A1
01BD            313   hrdisp:  
01BD 1202AB     314            lcall DisplayAlarm
01C0 30FBFA     315       jnb KEY.3, hrdisp
01C3 E538       316       mov a, hrsAlarm
01C5 2401       317            add a, #1
01C7 D4         318            da a
01C8 F538       319            mov hrsAlarm, a
01CA B41303     320       cjne A, #13H, A1
01CD 753801     321       mov hrsAlarm, #1
01D0            322   A1:      
01D0 20FA13     323            jb KEY.2, A2
01D3            324   mindisp:
01D3 1202AB     325            lcall DisplayAlarm
01D6 30FAFA     326       jnb KEY.2, mindisp
01D9 E537       327       mov a, minAlarm
01DB 2401       328            add a, #1
01DD D4         329            da a
01DE F537       330            mov minAlarm, a         
01E0 B46003     331       cjne A, #60H, A2
01E3 753700     332       mov minAlarm, #0
01E6            333   A2:      
01E6 20F913     334            jb KEY.1, A3
01E9            335   secdisp:
01E9 1202AB     336            lcall DisplayAlarm
01EC 30F9FA     337            jnb KEY.1, secdisp
01EF E536       338            mov a, secAlarm
01F1 2401       339            add a, #1
01F3 D4         340            da a
01F4 F536       341            mov secAlarm, a
01F6 B46003     342       cjne A, #60H, A3
01F9 753600     343       mov secAlarm, #0
01FC            344   A3:      
01FC 0201B4     345            ljmp A0
01FF            346   
01FF            347   ;-------------------------------------------------------------------------------------------
01FF            348   ;-------------------------------------------------------------------------------------------
01FF            349   ;-------------------------------------------------------------------------------------------
01FF            350   ;-------------------------------------------------------------------------------------------
01FF            351   ; here's all the subroutines called in the main program
01FF            352   
01FF            353   Alarm:
01FF D2E9       354            setb LEDRA.1
0201 20EF0D     355            jb SWA.7, startStateBeeps
0204 20EE14     356            jb SWA.6, nextStateBeeps
0207 20ED19     357            jb SWA.5, openDoorBeeps
020A 20EC1E     358            jb SWA.4, coolEnoughBeeps
020D 20EBEF     359            jb SWA.3, Alarm
0210 22         360            ret
0211            361            
0211            362   startStateBeeps:
0211 20EFFD     363            jb SWA.7, startStateBeeps
0214 D2EA       364            setb LEDRA.2
0216 120276     365            lcall shortBeep
0219 80E4       366            sjmp Alarm
021B            367            
021B            368   nextStateBeeps:
021B 20EEFD     369            jb SWA.6, nextStateBeeps
021E 120276     370            lcall shortBeep
0221 80DC       371            sjmp Alarm
0223            372            
0223            373   openDoorBeeps:
0223 20EDFD     374            jb SWA.5, openDoorBeeps
0226 120242     375            lcall longBeep
0229 80D4       376            sjmp Alarm
022B            377            
022B            378   coolEnoughBeeps:
022B 20ECFD     379            jb SWA.4, coolEnoughBeeps
022E 120276     380            lcall shortBeep         
0231 120276     381            lcall shortBeep
0234 120276     382            lcall shortBeep
0237 120276     383            lcall shortBeep
023A 120276     384            lcall shortBeep
023D 120276     385            lcall shortBeep
0240 80BD       386            sjmp Alarm
0242            387   
0242            388            
0242            389   longBeep:
0242 75E8FF     390            mov LEDRA, #11111111B
0245 7595FF     391            mov LEDRB, #11111111B 
0248 759E03     392            mov LEDRC, #00000011B
024B 120298     393       lcall buzzOn
024E 12029E     394            lcall WaitALittle
0251 12029E     395            lcall WaitALittle
0254 12029E     396            lcall WaitALittle
0257 12029E     397            lcall WaitALittle
025A 12029E     398            lcall WaitALittle
025D 12029E     399            lcall WaitALittle
0260 12029E     400            lcall WaitALittle
0263 12029E     401            lcall WaitALittle
0266 75E800     402            mov LEDRA, #00000000B
0269 759500     403            mov LEDRB, #00000000B 
026C 759E00     404            mov LEDRC, #00000000B
026F 12029B     405       lcall buzzOff
0272 12029E     406       lcall WaitALittle
0275 22         407       ret
0276            408            
0276            409   shortBeep:
0276 75E8FF     410            mov LEDRA, #11111111B
0279 7595FF     411            mov LEDRB, #11111111B
027C 759E03     412            mov LEDRC, #00000011B
027F 120298     413       lcall buzzOn
0282 12029E     414            lcall WaitALittle
0285 12029E     415            lcall WaitALittle
0288 75E800     416            mov LEDRA, #00000000B
028B 759500     417            mov LEDRB, #00000000B 
028E 759E00     418            mov LEDRC, #00000000B
0291 12029B     419       lcall buzzOff
0294 12029E     420       lcall WaitALittle
0297 22         421       ret
0298            422       
0298            423   buzzOn:
0298 D2AB       424            setb ET1
029A 22         425            ret
029B            426            
029B            427   buzzOff:
029B C2AB       428            clr ET1
029D 22         429            ret
029E            430            
029E            431   ;For a 33.33MHz clock, one cycle takes 30ns
029E            432   WaitALittle:
029E 7A14       433            mov R2, #20
02A0 79FA       434   L3: mov R1, #250
02A2 78FA       435   L2: mov R0, #250
02A4 D8FE       436   L1: djnz R0, L1
02A6 D9FA       437            djnz R1, L2
02A8 DAF6       438            djnz R2, L3
02AA 22         439            ret
02AB            440            
02AB            441   ;---------------------------for when we display the alarm        
02AB            442   DisplayAlarm:
02AB            443            ; Update the display
02AB 90001E     444            mov dptr, #myLUT
02AE            445            
02AE 7591FF     446            mov HEX0, #0FFH ;clear am/pm display    
02B1            447   
02B1 E536       448            mov a, secAlarm
02B3 540F       449            anl a, #0fH
02B5 93         450            movc a, @a+dptr
02B6 F593       451            mov HEX2, a
02B8 E536       452            mov a, secAlarm
02BA C4         453            swap a
02BB 540F       454            anl a, #0fH
02BD 93         455            movc a, @a+dptr
02BE F594       456            mov HEX3, a
02C0            457   
02C0 E537       458            mov a, minAlarm
02C2 540F       459            anl a, #0fH
02C4 93         460            movc a, @a+dptr
02C5 F58E       461            mov HEX4, a
02C7 E537       462            mov a, minAlarm
02C9 C4         463            swap a
02CA 540F       464            anl a, #0fH
02CC 93         465            movc a, @a+dptr
02CD F58F       466            mov HEX5, a
02CF            467   
02CF E538       468            mov a, hrsAlarm
02D1 540F       469            anl a, #0fH
02D3 93         470            movc a, @a+dptr
02D4 F596       471            mov HEX6, a
02D6 E538       472            mov a, hrsAlarm
02D8 20E402     473            jb acc.4, exitDispAlarm
02DB 74A0       474            mov a, #0A0H    
02DD            475   exitDispAlarm:
02DD C4         476            swap a
02DE 540F       477            anl a, #0fH
02E0 93         478            movc a, @a+dptr
02E1 F597       479            mov HEX7, a
02E3 22         480            ret
02E4            481            
02E4            482   ;-------this checks and changes am/pm
02E4            483   checkMeridiem:
02E4 E534       484            mov a, hrs
02E6 B4120C     485       cjne A, #12H, not12 ;if it isn't 12, leave
02E9            486       
02E9 20000B     487       jb still12, out ;if it is 12 but was previously 12, do nothing
02EC            488         
02EC            489   changeMeridiem: ;if it is 12 but was not previously 12 - now change meridiem
02EC E535       490            mov a, meridiem
02EE B2E2       491            cpl acc.2 ; changes 08H to 0CH and vice versa
02F0 F535       492            mov meridiem, a         
02F2            493            ;display am/pm
02F2 853591     494            mov HEX0, meridiem
02F5            495   not12:
02F5 C200       496            clr still12
02F7            497   out:
02F7 22         498            ret
02F8            499            
02F8            500   END
